fmod NAT-MULT is
    sort Nat .
    op 0 : -> Nat [ctor] .
    op s : Nat -> Nat [ctor] .
    op _+_ : Nat Nat -> Nat [prec 33] .
    op _*_ : Nat Nat -> Nat [prec 31] .

    vars M N : Nat .

    eq 0 + M = M .
    eq s(M) + N = s(M + N) .
    eq 0 * M = 0 .
    eq s(M) * N = N + M * N .
endfm

fmod NAT-MONUS is
    including NAT-MULT .
    op _monus_ : Nat Nat -> Nat [ctor] .

    vars M N : Nat .

    eq M monus 0 = M .
    eq 0 monus N = 0 .
    eq s(M) monus s(N) = (M monus N) .
endfm

*** Here ends Excercise 16.2 and Excercise 20 begins.

fmod BOOLEAN is
    sort Boolean .
    ops true false : -> Boolean [ctor] .
    op not_ : Boolean -> Boolean .
    ops _and_ _or_ : Boolean Boolean -> Boolean .
endfm


fmod LIST is
    including NAT-MULT .
    including BOOLEAN .
    sort List .
    op nil : -> List [ctor] .
    op __ : List Nat -> List [ctor] .
    op concat : List List -> List .
    op insertFront : Nat List -> List .
    op empty? : List -> Boolean .
    op last : List -> Nat .
    op rest : List -> List .
    op reverse : List -> List .
endfm

fmod LIST-FUNCTIONS is
    including LIST .
    vars N N' : Nat .
    vars L L' : List .

    eq insertFront(N, nil) = (nil N) .
    eq insertFront(N, L) = concat((nil N), L) .

    eq concat (L, nil) = L .
    eq concat (L, L' N) = concat(L, L') N .
    
    eq empty?(nil) = true .
    eq empty?(L) = false .

    eq rest(nil) = nil .
    eq rest(nil N) = nil .
    eq rest(L N N') = rest (L N) N' .

    eq last(nil) = 0 .
    eq last(nil N) = N .
    eq last(L N N') = last(L N') .

    eq reverse(nil) = nil .
    eq reverse(L N) = concat((nil N), reverse (L)) .

endfm

*** Here ends Excercise 20 and Excercise 22 begins.

fmod BINTREE-NAT1 is
    including BOOLEAN .
    including NAT-MULT .
    including LIST .
    including LIST-FUNCTIONS .
    sort BinTree .
    op niltree : -> BinTree [ctor] .
    op bintree : BinTree Nat BinTree -> BinTree [ctor] .
    ops preorder inorder postorder : BinTree -> List . *** Traverse the tree
    ops size weight : BinTree -> Nat .
    op isSearchTree : BinTree -> Boolean .
    op reverse : BinTree -> BinTree .

    vars BT BT' : BinTree .
    vars N N' : Nat .

    eq preorder(niltree) = nil .
    *** Root first, then left, then right subtrees.
    eq preorder(bintree(BT, N, BT')) = 
    insertFront(N, concat(preorder(BT), preorder(BT'))) .

    eq size(niltree) = 0 .
    eq size(bintree(BT, N, BT')) = s(size(BT) + size(BT')) .

    eq inorder(niltree) = nil .
    *** Left first, then root, then right subtrees.
    eq inorder(bintree(BT, N, BT')) = 
    concat((inorder(BT) N), inorder(BT')) .

    *** Left first, then right subtrees then root.
    eq postorder(niltree) = nil .
    eq postorder(bintree(BT, N, BT')) = 
    concat(postorder(BT), (postorder(BT') N)) .
    
    eq weight(niltree) = 0 .
    eq weight(bintree(BT, N, BT')) = N + (weight(BT) + weight(BT')) .

    eq reverse(niltree) = niltree .
    eq reverse(bintree(BT, N, BT')) = 
    bintree(reverse(BT'), N, reverse(BT)) .
endfm
