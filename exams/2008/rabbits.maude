mod RABBIT is protecting NAT .
    sorts Rabbit RabbitList .
    subsort Rabbit < RabbitList .

    ops empty b w : -> Rabbit [ctor] .
    op nil : -> RabbitList [ctor] .
    op __ : Rabbit RabbitList -> RabbitList [ctor assoc id: nil] .

    op init : Nat -> RabbitList .

    vars N : Nat .
    vars RL RL' : Rabbit .

    eq init(0) = empty .
    eq init(s N) = w init(N) b .

    rl [wToEmpty] : w empty => empty w .
    rl [wJump] : w b empty => empty b w .
    rl [bToEmpty] : empty b => b empty .
    rl [bJump] : empty w b => b w empty .
endm

mod Check-INV is protecting RABBIT .
    op numberOf_in_ : Rabbit RabbitList -> Nat .

    var RL : RabbitList .
    var R R' : Rabbit .

    eq numberOf R in nil = 0 .
    eq numberOf R in R' RL = (numberOf R in RL) + (if R == R' then 1 else 0 fi) .
endm
